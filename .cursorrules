# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section so you will not make the same mistake again.

Use the `.cursorrules` file as a Scratchpad to organize your thoughts. When receiving a new task, review the content, clear old tasks if necessary, explain the current task, and plan steps to complete it. Use todo markers to indicate progress:
[X] Task 1
[ ] Task 2

Update progress in the Scratchpad when finishing subtasks or milestones to maintain a big picture of the task.

# Tools

All tools are in python3. For batch processing, consult the python files and write your own script if needed.

## Screenshot Verification
```bash
venv/bin/python3 tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
venv/bin/python3 tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

## LLM
```bash
venv/bin/python3 ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

Supported providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

## Web browser
```bash
venv/bin/python3 ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```

## Search engine
```bash
venv/bin/python3 ./tools/search_engine.py "your search keywords"
```

# Lessons

## User Specified Lessons
- Use python venv in ./venv for development. Check for 'uv' with `which uv`. If available, use `uv pip install`; otherwise, use `pip`.
- For git multiline commit messages, write to a file and use `git commit -F <filename>`. Include "[Cursor] " in commit messages and PR titles.
- The official BTS brand color is #FFDE00 (yellow) and should be used for branded elements instead of purple.
- When customizing Sonner library toast notifications, use standard properties in ExternalToast type and avoid non-standard properties like 'descriptionStyle'.
- For Next.js page layouts, set specific max-width constraints instead of relying on container classes to maintain consistent widths across different screen sizes.
- For image creation in canvas contexts, use `document.createElement('img')` instead of `new Image()` to avoid TypeScript errors.
- Use Unicode escape sequences like `\u201C` (left double quote) and `\u201D` (right double quote) for special characters in TypeScript/JavaScript to avoid syntax and linter errors.
- When deploying to hosting platforms like Netlify or Vercel, ensure that all necessary environment variables (such as Supabase credentials) are configured in the platform's environment settings.
- For mobile-friendly spacing in Next.js layouts, use responsive padding classes (e.g., pt-0 md:pt-8) to reduce space between navbar and content on small screens while maintaining appropriate spacing on larger displays.
- Avoid using console.error in production code; instead, use conditional logging based on NODE_ENV to show detailed errors only in development.
- When implementing SEO in Next.js, metadata cannot be exported from client components (with "use client" directive). For client pages, create a separate metadata.ts file in the same directory.
- For date and time displays that need to work across different user timezones, implement client-side timezone handling using the browser's Date API instead of server-side fixed timezones.
- When working with third-party APIs like Spotify that have rate limits, implement these strategies to prevent 429 errors: 1) Add local caching, 2) Use exponential backoff for retries, 3) Process batch requests sequentially with delays, 4) Add client-side throttling, and 5) Provide clear user feedback during retries.

## Cursor learned
- Handle UTF-8 encoding properly for international search queries
- Use 'seaborn-v0_8' instead of 'seaborn' due to recent version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- In Next.js, `dynamic` imports with `{ ssr: false }` cannot be used directly in Server Components. Create a client component wrapper with "use client" that handles the dynamic import.
- For React 19 compatibility issues with packages like react-day-picker, use --legacy-peer-deps or downgrade to React 18.2.0
- When renaming React component functions, maintain backward compatibility with additional named exports
- In Next.js sitemap.ts files, use 'as const' type assertion for changeFrequency values to match the expected literal types in MetadataRoute.Sitemap
- In Next.js projects with aliased imports (@/hooks, @/components), make sure to maintain proper directory structures and use re-export files to maintain backward compatibility when refactoring.

## Message Box UI Pattern
- Container: White background, black border (2px), rounded corners (16px)
- Heading: "Black Han Sans" font, ~32px, black, center-aligned
- Form Layout: Vertical stack with ~16-20px spacing
- Input Fields: Black border (2px), white background, rounded corners (8px), padding (12px)
- Submit Button: Black background, yellow text (#FFDE00), purple heart emoji, full width, rounded (8px)
- Labels: Bold, black text, slightly larger than input text
- Textarea: Taller than regular inputs, same styling pattern

# Scratchpad

[X] Implement varied photos for BTS members and OT7 in ARMY Card page
  - [X] Created OT7 folder in public/images/members/varied/ot7
  - [X] Added 4 group photos (ot7-1.jpg through ot7-4.jpg) to the OT7 folder
  - [X] Updated member-photos.ts to include OT7 photos in memberVariedPhotos object
  - [X] Enhanced getRandomMemberPhoto function with time-based rotation (changes every 4 hours)
  - [X] Created new getArmyCardPhoto function for consistent daily photo selection
  - [X] Updated ARMY Card Generator to use dynamic photos instead of static member.image
  - [X] Added memberPhoto state to track the current dynamic photo
  - [X] Updated all image loading logic to use the dynamic memberPhoto
  - [X] Ensured photos change dynamically over time while remaining consistent during user sessions
  - [X] Added manual photo refresh button below bias selection dropdown
  - [X] Created getRandomVariedPhoto function for manual photo cycling
  - [X] Added handleRefreshPhoto function to manually change displayed photos
  - [X] Added refresh icon and contextual button text (individual member vs. OT7 group)
  - [X] Implemented toast notification for user feedback when photo is refreshed

[X] Implement user photo upload feature for ARMY Card Generator
  - [X] Updated form schema to include photoOption field with validation
  - [X] Added new state variables for user photo management (userPhoto, userPhotoFile, userImageLoaded)
  - [X] Created file input ref and photo upload handling functions
  - [X] Implemented photo upload with validation (file type, size limits)
  - [X] Added photo option selection (Member Photo Only, My Photo Only, Member + My Photo)
  - [X] Created conditional photo upload UI that appears based on selected option
  - [X] Added photo preview with upload status indicator
  - [X] Implemented photo removal functionality with proper cleanup
  - [X] Updated card preview logic to handle all three photo layout options
  - [X] Enhanced canvas drawing logic for different photo layouts:
    - [X] Single member photo layout
    - [X] Single user photo layout  
    - [X] Split layout with both photos side-by-side with labels
  - [X] Updated downloadCard function to properly load user images for canvas rendering
  - [X] Added proper error handling and user feedback with toast notifications
  - [X] Included upload guidelines and file format/size restrictions
  - [X] Maintained all existing functionality while adding new photo options

[X] Fix ARMY Card photo display and remove labels
  - [X] Remove member name and "You" labels from canvas drawing in downloadCard function
  - [X] Improve image sizing and centering for visual balance in canvas
  - [X] Fix user photo preview aspect ratio and visibility in JSX preview
  - [X] Ensure both photos are proportionally sized and centered
  - [X] Maintain background styling and other card elements intact

[X] Optimize photo preview and text layout in ARMY Card
  - [X] Resize user uploaded photo preview to compact size (32x32 with centered positioning)
  - [X] Implement auto-scaling font sizes to prevent text cutoff
  - [X] Add text wrapping functionality for long text phrases
  - [X] Ensure consistent formatting and spacing between bullet point lines
  - [X] Optimize text layout to fit within canvas boundaries
  - [X] Maintain all current color schemes, emojis, and styling
  - [X] Ensure balanced, clean, and readable output on all devices
  - [X] Fix font sizes to match preview (reduced from 80px/70px to 56px/52px)
  - [X] Improve header title and badge sizing for better proportions
  - [X] Optimize bullet point sizes and positioning
  - [X] Enhance flag sizing and positioning relative to country text
  - [X] Fix information section positioning and spacing for all photo options
  - [X] Fix "My Photo Only" option to show both user photo and complete information section
  - [X] Fix user photo cropping - ensure full photos are visible in preview and downloaded cards
  - [X] Increase user photo preview size to 40x40 (160px) for better visibility
  - [X] Change from object-cover to object-contain to prevent cropping
  - [X] Add light gray backgrounds for better photo presentation