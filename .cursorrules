# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section so you will not make the same mistake again.

Use the `.cursorrules` file as a Scratchpad to organize your thoughts. When receiving a new task, review the content, clear old tasks if necessary, explain the current task, and plan steps to complete it. Use todo markers to indicate progress:
[X] Task 1
[ ] Task 2

Update progress in the Scratchpad when finishing subtasks or milestones to maintain a big picture of the task.

# Tools

All tools are in python3. For batch processing, consult the python files and write your own script if needed.

## Screenshot Verification
```bash
venv/bin/python3 tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
venv/bin/python3 tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

## LLM
```bash
venv/bin/python3 ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

Supported providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

## Web browser
```bash
venv/bin/python3 ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```

## Search engine
```bash
venv/bin/python3 ./tools/search_engine.py "your search keywords"
```

# Lessons

## User Specified Lessons
- Use python venv in ./venv for development. Check for 'uv' with `which uv`. If available, use `uv pip install`; otherwise, use `pip`.
- For git multiline commit messages, write to a file and use `git commit -F <filename>`. Include "[Cursor] " in commit messages and PR titles.
- The official BTS brand color is #FFDE00 (yellow) and should be used for branded elements instead of purple.
- When customizing Sonner library toast notifications, use standard properties in ExternalToast type and avoid non-standard properties like 'descriptionStyle'.
- For Next.js page layouts, set specific max-width constraints instead of relying on container classes to maintain consistent widths across different screen sizes.
- For image creation in canvas contexts, use `document.createElement('img')` instead of `new Image()` to avoid TypeScript errors.
- Use Unicode escape sequences like `\u201C` (left double quote) and `\u201D` (right double quote) for special characters in TypeScript/JavaScript to avoid syntax and linter errors.
- When deploying to hosting platforms like Netlify or Vercel, ensure that all necessary environment variables (such as Supabase credentials) are configured in the platform's environment settings.
- For mobile-friendly spacing in Next.js layouts, use responsive padding classes (e.g., pt-0 md:pt-8) to reduce space between navbar and content on small screens while maintaining appropriate spacing on larger displays.
- Avoid using console.error in production code; instead, use conditional logging based on NODE_ENV to show detailed errors only in development.
- When implementing SEO in Next.js, metadata cannot be exported from client components (with "use client" directive). For client pages, create a separate metadata.ts file in the same directory.
- For date and time displays that need to work across different user timezones, implement client-side timezone handling using the browser's Date API instead of server-side fixed timezones.
- When working with third-party APIs like Spotify that have rate limits, implement these strategies to prevent 429 errors: 1) Add local caching, 2) Use exponential backoff for retries, 3) Process batch requests sequentially with delays, 4) Add client-side throttling, and 5) Provide clear user feedback during retries.
- When Supabase operations fail with empty error objects `{}`, it usually means the database tables don't exist yet. Always provide helpful error messages that mention "Database tables may not exist. Please run the SQL schema first." instead of just logging the empty error object.
- When implementing like/love counters in Supabase, ensure the main table's like_count field is properly updated when likes are added/removed from the likes junction table. Don't just read the existing like_count - calculate the actual count from the likes table and update the main table to keep it synchronized.
- For generating visual album covers from text data, use deterministic color palette selection based on song title character codes to ensure consistent colors across sessions while providing variety between different playlists.
- **BTS Playlist Love Button Fix**: When implementing playlist like functionality, always include proper error handling for empty error objects, duplicate like prevention, and manual like count synchronization as a fallback to triggers. Use try-catch blocks with specific error type checking and provide helpful user feedback.

## Cursor learned
- Handle UTF-8 encoding properly for international search queries
- Use 'seaborn-v0_8' instead of 'seaborn' due to recent version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- In Next.js, `dynamic` imports with `{ ssr: false }` cannot be used directly in Server Components. Create a client component wrapper with "use client" that handles the dynamic import.
- For React 19 compatibility issues with packages like react-day-picker, use --legacy-peer-deps or downgrade to React 18.2.0
- When renaming React component functions, maintain backward compatibility with additional named exports
- In Next.js sitemap.ts files, use 'as const' type assertion for changeFrequency values to match the expected literal types in MetadataRoute.Sitemap
- In Next.js projects with aliased imports (@/hooks, @/components), make sure to maintain proper directory structures and use re-export files to maintain backward compatibility when refactoring.

## Message Box UI Pattern
- Container: White background, black border (2px), rounded corners (16px)
- Heading: "Black Han Sans" font, ~32px, black, center-aligned
- Form Layout: Vertical stack with ~16-20px spacing
- Input Fields: Black border (2px), white background, rounded corners (8px), padding (12px)
- Submit Button: Black background, yellow text (#FFDE00), purple heart emoji, full width, rounded (8px)
- Labels: Bold, black text, slightly larger than input text
- Textarea: Taller than regular inputs, same styling pattern

### Completed Features

#### Smart Logo System
- ✅ Added theme context to navbar component
- ✅ Implemented brightness detection for navbar backgrounds
- ✅ Dynamic switching between regular and white BTS logos
- ✅ Applied to both main logo and BTS dropdown icons
- ✅ Works for both desktop and mobile menu interfaces

#### Love Yourself Answer Theme (New)
- ✅ Created vibrant gradient theme inspired by LY Answer artwork:
  - Primary: Vibrant Pink (#E91E63) - left side of gradient
  - Secondary: Deep Purple (#9C27B0) - center gradient
  - Accent: Bright Blue (#2196F3) - right side gradient
  - Background: Pure white to make colors pop
- ✅ Added flowing animations: gradient-flow, love-pulse, rainbow-wave
- ✅ Implemented colorful effects and gradient backgrounds
- ✅ Created dynamic color-shifting animations

#### CSS Animations & Effects
- ✅ Gradient flow animations with 200% background sizing
- ✅ Love pulse and color-shift effects for elements
- ✅ Rainbow wave animations cycling through theme colors
- ✅ Flowing motion effects for decorative elements
- ✅ Enhanced navbar with linear gradient background

#### Previous Themes Maintained
- ✅ Spring Day: Gentle pastel aesthetic for renewal and hope
- ✅ Black Swan: Elegant dark theme with artistic sophistication
- ✅ Permission to Dance: Festival celebration vibes
- ✅ Butter: Smooth summery golden aesthetics

#### Theme Integration
- ✅ Added Love Yourself Answer to availableThemes registry
- ✅ Comprehensive emoji and pattern elements for gradient theme
- ✅ Enhanced navbar effects with flowing gradient lines
- ✅ Sophisticated card styling with color-shifting hover effects

### Technical Implementation
- Smart logo detection using brightness calculation (luminance formula)
- Dynamic theme-aware component rendering
- Love Yourself Answer: Vibrant gradient aesthetic capturing self-love and acceptance
- Comprehensive CSS animations with optimized performance
- Cross-theme compatibility with consistent component behavior
- Enhanced visual effects while maintaining accessibility standards

### Technical Implementation Details
- **Mobile Menu Color Logic**: Uses existing `isDarkNavbar()` function to detect dark themes
- **Dynamic Text Classes**: `mobileMenuTextClass` switches between `text-white` and `text-black`
- **Smart Hover Effects**: Different hover colors for dark vs light themes
- **Emoji Cleanup**: Removed floating emoji animations and main headline emojis
- **Double Border Fix**: Removed inner border on mobile theme toggle image

### Generator Sequence Implemented:
1. **ARMY Name** - Creator name input field
2. **Playlist Name** - Required playlist title field
3. **BTS Song Search** - Real-time search through 100+ songs with 10-song limit
4. **Description (Optional)** - Optional description field for playlist context

### Playlist Features Summary:
- **Featured View**: Shows 5 best playlists on main page for discovery
- **Individual Pages**: Unique URLs for each playlist with full details
- **All Playlists**: Dedicated page with pagination for browsing complete collection
- **Engaging Design**: Card-based layout with song previews and interactive elements
- **No Emojis**: Clean, professional design matching site standards
- **Mobile Responsive**: Optimized for all screen sizes and devices

# Scratchpad

## Current Task: Customize BTS Playlist Page to Match Site Style

### User Requirements:
1. [X] Make header area match /army-story page style (heading and description)
2. [X] Remove gradient element colors, use theme colors automatically
3. [X] Make playlist preview containers more compact
4. [X] Add search function to search by playlist name or user name
5. [X] Improve overall styling to match all other pages

### Completed Changes:

1. **Main Page Styling (`/bts-playlist/page.tsx`)**:
   - ✅ Updated header to match army-story style with standard text sizing
   - ✅ Removed all gradient colors and replaced with theme colors
   - ✅ Added search bar integration with create button layout
   - ✅ Implemented search results display with clear/pagination
   - ✅ Updated CTA section to match consistent site styling

2. **Search Functionality**:
   - ✅ Added `searchPlaylists` function to playlist context
   - ✅ Created `PlaylistSearch` component matching `StorySearch`
   - ✅ Implemented live search with debounce and pagination
   - ✅ Added search by playlist name AND creator name
   - ✅ Search results indicator with clear functionality

3. **Compact Playlist Cards (`PlaylistList`)**:
   - ✅ Reduced card size and spacing for more compact layout
   - ✅ Removed gradients and fancy hover effects
   - ✅ Used standard rounded corners (`rounded-lg`)
   - ✅ Simplified color scheme with theme colors
   - ✅ Made song preview section more compact (3 songs max)
   - ✅ Simplified action buttons with consistent styling

4. **Individual Playlist Pages**:
   - ✅ Removed gradient text from playlist titles
   - ✅ Maintained Black Han Sans font consistency
   - ✅ Clean, simple header styling

### Technical Improvements:
- Consistent theme color usage throughout: `bg-bts-accent`, `text-black`, `border-black`
- Standard rounded corners (`rounded-lg`) instead of oversized ones
- Compact, efficient grid layout matching site standards
- Live search functionality with proper debouncing
- Simplified hover effects and transitions
- Proper pagination integration for search results
- Clean, accessible component design

