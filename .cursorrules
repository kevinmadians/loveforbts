# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section so you will not make the same mistake again.

Use the `.cursorrules` file as a Scratchpad to organize your thoughts. When receiving a new task, review the content, clear old tasks if necessary, explain the current task, and plan steps to complete it. Use todo markers to indicate progress:
[X] Task 1
[ ] Task 2

Update progress in the Scratchpad when finishing subtasks or milestones to maintain a big picture of the task.

# Tools

All tools are in python3. For batch processing, consult the python files and write your own script if needed.

## Screenshot Verification
```bash
venv/bin/python3 tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
venv/bin/python3 tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

## LLM
```bash
venv/bin/python3 ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

Supported providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

## Web browser
```bash
venv/bin/python3 ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```

## Search engine
```bash
venv/bin/python3 ./tools/search_engine.py "your search keywords"
```

# Lessons

## User Specified Lessons
- Use python venv in ./venv for development. Check for 'uv' with `which uv`. If available, use `uv pip install`; otherwise, use `pip`.
- For git multiline commit messages, write to a file and use `git commit -F <filename>`. Include "[Cursor] " in commit messages and PR titles.
- The official BTS brand color is #FFDE00 (yellow) and should be used for branded elements instead of purple.
- When customizing Sonner library toast notifications, use standard properties in ExternalToast type and avoid non-standard properties like 'descriptionStyle'.
- For Next.js page layouts, set specific max-width constraints instead of relying on container classes to maintain consistent widths across different screen sizes.
- For image creation in canvas contexts, use `document.createElement('img')` instead of `new Image()` to avoid TypeScript errors.
- Use Unicode escape sequences like `\u201C` (left double quote) and `\u201D` (right double quote) for special characters in TypeScript/JavaScript to avoid syntax and linter errors.
- When deploying to hosting platforms like Netlify or Vercel, ensure that all necessary environment variables (such as Supabase credentials) are configured in the platform's environment settings.
- For mobile-friendly spacing in Next.js layouts, use responsive padding classes (e.g., pt-0 md:pt-8) to reduce space between navbar and content on small screens while maintaining appropriate spacing on larger displays.
- Avoid using console.error in production code; instead, use conditional logging based on NODE_ENV to show detailed errors only in development.
- When implementing SEO in Next.js, metadata cannot be exported from client components (with "use client" directive). For client pages, create a separate metadata.ts file in the same directory.
- For date and time displays that need to work across different user timezones, implement client-side timezone handling using the browser's Date API instead of server-side fixed timezones.
- When working with third-party APIs like Spotify that have rate limits, implement these strategies to prevent 429 errors: 1) Add local caching, 2) Use exponential backoff for retries, 3) Process batch requests sequentially with delays, 4) Add client-side throttling, and 5) Provide clear user feedback during retries.
- When Supabase operations fail with empty error objects `{}`, it usually means the database tables don't exist yet. Always provide helpful error messages that mention "Database tables may not exist. Please run the SQL schema first." instead of just logging the empty error object.

## Cursor learned
- Handle UTF-8 encoding properly for international search queries
- Use 'seaborn-v0_8' instead of 'seaborn' due to recent version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- In Next.js, `dynamic` imports with `{ ssr: false }` cannot be used directly in Server Components. Create a client component wrapper with "use client" that handles the dynamic import.
- For React 19 compatibility issues with packages like react-day-picker, use --legacy-peer-deps or downgrade to React 18.2.0
- When renaming React component functions, maintain backward compatibility with additional named exports
- In Next.js sitemap.ts files, use 'as const' type assertion for changeFrequency values to match the expected literal types in MetadataRoute.Sitemap
- In Next.js projects with aliased imports (@/hooks, @/components), make sure to maintain proper directory structures and use re-export files to maintain backward compatibility when refactoring.

## Message Box UI Pattern
- Container: White background, black border (2px), rounded corners (16px)
- Heading: "Black Han Sans" font, ~32px, black, center-aligned
- Form Layout: Vertical stack with ~16-20px spacing
- Input Fields: Black border (2px), white background, rounded corners (8px), padding (12px)
- Submit Button: Black background, yellow text (#FFDE00), purple heart emoji, full width, rounded (8px)
- Labels: Bold, black text, slightly larger than input text
- Textarea: Taller than regular inputs, same styling pattern

# Scratchpad

## Current Task: BTS Album Theme Selection Feature

### Project Analysis
Current state: Website uses "Butter" theme with #FFDE00 yellow as primary color. Found existing theme system in ARMY Card Generator with 4 themes: classic, purple, black, pastel.

### BTS Album Theme Suggestions

#### 1. **Butter (Current)**
- **Colors**: Golden Yellow (#FFDE00), Cream (#FFF8DC), Black (#000000)
- **Description**: Smooth, bright, summery vibes
- **Elements**: Sunflower motifs, smooth gradients

#### 2. **Dynamite** 
- **Colors**: Electric Blue (#1E90FF), Hot Pink (#FF69B4), Yellow (#FFDE00)
- **Description**: Disco, retro, energetic 70s vibes
- **Elements**: Disco balls, neon effects, retro patterns

#### 3. **Permission to Dance**
- **Colors**: Sunset Orange (#FF6B35), Purple (#8A2BE2), White (#FFFFFF)
- **Description**: Festival, celebration, freedom vibes
- **Elements**: Confetti, balloons, party decorations

#### 4. **Black Swan**
- **Colors**: Deep Black (#000000), Silver (#C0C0C0), Purple (#4B0082)
- **Description**: Elegant, mysterious, artistic vibes
- **Elements**: Swan motifs, elegant typography, shadow effects

#### 5. **Spring Day**
- **Colors**: Soft Pink (#FFB6C1), Sky Blue (#87CEEB), White (#FFFFFF)
- **Description**: Nostalgic, gentle, emotional vibes
- **Elements**: Cherry blossoms, clouds, gentle gradients

#### 6. **Blood Sweat & Tears**
- **Colors**: Burgundy (#800020), Gold (#FFD700), Dark Purple (#301934)
- **Description**: Dramatic, mature, luxury vibes
- **Elements**: Wings, baroque patterns, rich textures

#### 7. **DNA**
- **Colors**: Cosmic Purple (#6B46C1), Galaxy Blue (#1E40AF), Star White (#FFFFFF)
- **Description**: Cosmic, futuristic, DNA helix vibes
- **Elements**: Galaxy patterns, DNA helixes, geometric shapes

#### 8. **Mic Drop**
- **Colors**: Neon Green (#39FF14), Black (#000000), Silver (#C0C0C0)
- **Description**: Bold, confident, street vibes
- **Elements**: Urban patterns, bold typography, neon effects

### Implementation Plan

#### Phase 1: Theme System Foundation
- [X] Create centralized theme configuration system
- [X] Update CSS variables for theme switching
- [X] Create theme context provider for React
- [X] Add theme persistence (localStorage)

#### Phase 2: Theme Data & Components
- [X] Create comprehensive theme data file with all BTS album themes
- [X] Build theme selector component with album artwork
- [ ] Create theme preview functionality
- [X] Add smooth transition animations between themes

#### Phase 3: UI Integration
- [X] Add theme selector to navigation/settings
- [X] Update existing components to use theme variables
- [X] Implement theme-specific animations and effects
- [X] Fix hardcoded #FFDE00 colors in bias-test, messages, army-story pages
- [X] Fix hardcoded colors in quiz pages and user-generated content pages
- [X] Update game page headers to match site layout patterns (remove icons, improve mobile responsiveness)
- [X] Remove remaining emojis/icons from page headers and make fully responsive with engaging Back to Games buttons
- [ ] Add theme-specific sound effects (optional)

#### Phase 4: Advanced Features
- [ ] Theme-specific background patterns/textures
- [ ] Album artwork integration
- [ ] Theme-specific typography choices
- [ ] Custom cursor/hover effects per theme
- [ ] Theme-specific particle effects

#### Phase 5: Enhancement Features
- [ ] Theme scheduling (e.g., auto-change based on time/date)
- [ ] Theme recommendations based on user activity
- [ ] Share theme preferences with other users
- [ ] Theme-specific Easter eggs and animations
- [ ] Integration with BTS comeback dates for auto-theme switching

### Technical Implementation Strategy

#### File Structure