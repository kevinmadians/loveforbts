# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section so you will not make the same mistake again.

Use the `.cursorrules` file as a Scratchpad to organize your thoughts. When receiving a new task, review the content, clear old tasks if necessary, explain the current task, and plan steps to complete it. Use todo markers to indicate progress:
[X] Task 1
[ ] Task 2

Update progress in the Scratchpad when finishing subtasks or milestones to maintain a big picture of the task.

# Tools

All tools are in python3. For batch processing, consult the python files and write your own script if needed.

## Screenshot Verification
```bash
venv/bin/python3 tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
venv/bin/python3 tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

## LLM
```bash
venv/bin/python3 ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

Supported providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

## Web browser
```bash
venv/bin/python3 ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```

## Search engine
```bash
venv/bin/python3 ./tools/search_engine.py "your search keywords"
```

# Lessons

## User Specified Lessons
- Use python venv in ./venv for development. Check for 'uv' with `which uv`. If available, use `uv pip install`; otherwise, use `pip`.
- For git multiline commit messages, write to a file and use `git commit -F <filename>`. Include "[Cursor] " in commit messages and PR titles.
- The official BTS brand color is #FFDE00 (yellow) and should be used for branded elements instead of purple.
- When customizing Sonner library toast notifications, use standard properties in ExternalToast type and avoid non-standard properties like 'descriptionStyle'.
- For Next.js page layouts, set specific max-width constraints instead of relying on container classes to maintain consistent widths across different screen sizes.
- For image creation in canvas contexts, use `document.createElement('img')` instead of `new Image()` to avoid TypeScript errors.
- Use Unicode escape sequences like `\u201C` (left double quote) and `\u201D` (right double quote) for special characters in TypeScript/JavaScript to avoid syntax and linter errors.
- When deploying to hosting platforms like Netlify or Vercel, ensure that all necessary environment variables (such as Supabase credentials) are configured in the platform's environment settings.
- For mobile-friendly spacing in Next.js layouts, use responsive padding classes (e.g., pt-0 md:pt-8) to reduce space between navbar and content on small screens while maintaining appropriate spacing on larger displays.
- Avoid using console.error in production code; instead, use conditional logging based on NODE_ENV to show detailed errors only in development.
- When implementing SEO in Next.js, metadata cannot be exported from client components (with "use client" directive). For client pages, create a separate metadata.ts file in the same directory.
- For date and time displays that need to work across different user timezones, implement client-side timezone handling using the browser's Date API instead of server-side fixed timezones.
- When working with third-party APIs like Spotify that have rate limits, implement these strategies to prevent 429 errors: 1) Add local caching, 2) Use exponential backoff for retries, 3) Process batch requests sequentially with delays, 4) Add client-side throttling, and 5) Provide clear user feedback during retries.
- When Supabase operations fail with empty error objects `{}`, it usually means the database tables don't exist yet. Always provide helpful error messages that mention "Database tables may not exist. Please run the SQL schema first." instead of just logging the empty error object.

## Cursor learned
- Handle UTF-8 encoding properly for international search queries
- Use 'seaborn-v0_8' instead of 'seaborn' due to recent version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- In Next.js, `dynamic` imports with `{ ssr: false }` cannot be used directly in Server Components. Create a client component wrapper with "use client" that handles the dynamic import.
- For React 19 compatibility issues with packages like react-day-picker, use --legacy-peer-deps or downgrade to React 18.2.0
- When renaming React component functions, maintain backward compatibility with additional named exports
- In Next.js sitemap.ts files, use 'as const' type assertion for changeFrequency values to match the expected literal types in MetadataRoute.Sitemap
- In Next.js projects with aliased imports (@/hooks, @/components), make sure to maintain proper directory structures and use re-export files to maintain backward compatibility when refactoring.

## Message Box UI Pattern
- Container: White background, black border (2px), rounded corners (16px)
- Heading: "Black Han Sans" font, ~32px, black, center-aligned
- Form Layout: Vertical stack with ~16-20px spacing
- Input Fields: Black border (2px), white background, rounded corners (8px), padding (12px)
- Submit Button: Black background, yellow text (#FFDE00), purple heart emoji, full width, rounded (8px)
- Labels: Bold, black text, slightly larger than input text
- Textarea: Taller than regular inputs, same styling pattern

# Scratchpad

## Current Task: Enhanced BTS Military Discharge Countdown Section

### Task Description
Enhanced the BTS Military Discharge Countdown section on homepage with:
1. âœ… Changed "0 days" to "Today is discharge date!" with green styling
2. âœ… Dynamic color changes when reaching discharge day (green like Jin and J-Hope)
3. âœ… Made member photos and names clickable to navigate to individual member pages
4. âœ… Added engaging status information for discharged members
5. âœ… Enhanced countdown timers with progress indicators and emotive messages
6. âœ… Improved visual styling and animations

### Completed Features

#### Dynamic Discharge Status
- âœ… Smart detection of discharge day with special "Today is discharge date! ðŸŽ‰" message
- âœ… Green color styling for discharged members and those discharging today
- âœ… Animate pulse effect for members discharging today
- âœ… Progress-based color coding (green >90%, yellow >70%, blue/purple default)

#### Navigation & Interactivity
- âœ… Clickable member photos and names linking to `/members/{slug}` pages
- âœ… External link icons to indicate clickable elements
- âœ… Hover effects with scaling and shadow animations
- âœ… Smooth color transitions on hover

#### Enhanced Visual Information
- âœ… Status badges for discharged members ("âœ… Discharged")
- âœ… Engaging status messages ("ðŸŽ‰ Successfully completed military service")
- âœ… Progress percentage display alongside progress bars
- âœ… Emotive countdown messages ("Almost there! ðŸš€", "Getting closer! ðŸ’ª")
- âœ… Calendar icons for discharge dates
- âœ… Clock icons for service status

#### Improved Styling
- âœ… Enhanced progress bars with gradient colors based on completion
- âœ… Special ring styling for members discharging today
- âœ… Better spacing and typography
- âœ… Fun instructional message at bottom about clickable elements

#### Calendar Section Enhancements
- âœ… Changed "Upcoming Events" to celebration titles when discharge day detected
- âœ… Hidden time display (12:00 AM) on frontend while keeping for Google Calendar
- âœ… Removed "Add to Calendar" button for events happening today
- âœ… Special green styling and animations for discharge events
- âœ… Custom celebration messages for discharge events happening today
- âœ… Special celebration banner for today's discharge events

#### Homepage Discharge Celebration CTA
- âœ… Created DischargeCelebrationCTA component that only shows on discharge days
- âœ… Animated celebration banner with floating hearts and special styling
- âœ… Direct links to send celebration messages
- âœ… Dynamic messaging for single vs multiple member discharges

#### Messages Page Discharge Day Enhancement
- âœ… Special celebration banner when visiting messages page on discharge day
- âœ… Updated hero text and CTAs for discharge celebration context
- âœ… Green-themed buttons and styling for discharge days
- âœ… Custom celebration statistics and messaging

### Technical Implementation
- Member slug mapping for proper navigation routing
- Client-side discharge day detection using local timezone
- Dynamic styling based on service status and progress
- Accessibility improvements with proper ARIA labels
- Responsive design maintained across all screen sizes
- Cross-component discharge day detection system
- Conditional UI theming for special events
- Enhanced user engagement through contextual messaging