# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section so you will not make the same mistake again.

Use the `.cursorrules` file as a Scratchpad to organize your thoughts. When receiving a new task, review the content, clear old tasks if necessary, explain the current task, and plan steps to complete it. Use todo markers to indicate progress:
[X] Task 1
[ ] Task 2

Update progress in the Scratchpad when finishing subtasks or milestones to maintain a big picture of the task.

# Tools

All tools are in python3. For batch processing, consult the python files and write your own script if needed.

## Screenshot Verification
```bash
venv/bin/python3 tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
venv/bin/python3 tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

## LLM
```bash
venv/bin/python3 ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

Supported providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

## Web browser
```bash
venv/bin/python3 ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```

## Search engine
```bash
venv/bin/python3 ./tools/search_engine.py "your search keywords"
```

# Lessons

## User Specified Lessons
- Use python venv in ./venv for development. Check for 'uv' with `which uv`. If available, use `uv pip install`; otherwise, use `pip`.
- For git multiline commit messages, write to a file and use `git commit -F <filename>`. Include "[Cursor] " in commit messages and PR titles.
- The official BTS brand color is #FFDE00 (yellow) and should be used for branded elements instead of purple.
- When customizing Sonner library toast notifications, use standard properties in ExternalToast type and avoid non-standard properties like 'descriptionStyle'.
- For Next.js page layouts, set specific max-width constraints instead of relying on container classes to maintain consistent widths across different screen sizes.
- For image creation in canvas contexts, use `document.createElement('img')` instead of `new Image()` to avoid TypeScript errors.
- Use Unicode escape sequences like `\u201C` (left double quote) and `\u201D` (right double quote) for special characters in TypeScript/JavaScript to avoid syntax and linter errors.
- When deploying to hosting platforms like Netlify or Vercel, ensure that all necessary environment variables (such as Supabase credentials) are configured in the platform's environment settings.
- For mobile-friendly spacing in Next.js layouts, use responsive padding classes (e.g., pt-0 md:pt-8) to reduce space between navbar and content on small screens while maintaining appropriate spacing on larger displays.
- Avoid using console.error in production code; instead, use conditional logging based on NODE_ENV to show detailed errors only in development.
- When implementing SEO in Next.js, metadata cannot be exported from client components (with "use client" directive). For client pages, create a separate metadata.ts file in the same directory.
- For date and time displays that need to work across different user timezones, implement client-side timezone handling using the browser's Date API instead of server-side fixed timezones.
- When working with third-party APIs like Spotify that have rate limits, implement these strategies to prevent 429 errors: 1) Add local caching, 2) Use exponential backoff for retries, 3) Process batch requests sequentially with delays, 4) Add client-side throttling, and 5) Provide clear user feedback during retries.
- When Supabase operations fail with empty error objects `{}`, it usually means the database tables don't exist yet. Always provide helpful error messages that mention "Database tables may not exist. Please run the SQL schema first." instead of just logging the empty error object.

## Cursor learned
- Handle UTF-8 encoding properly for international search queries
- Use 'seaborn-v0_8' instead of 'seaborn' due to recent version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- In Next.js, `dynamic` imports with `{ ssr: false }` cannot be used directly in Server Components. Create a client component wrapper with "use client" that handles the dynamic import.
- For React 19 compatibility issues with packages like react-day-picker, use --legacy-peer-deps or downgrade to React 18.2.0
- When renaming React component functions, maintain backward compatibility with additional named exports
- In Next.js sitemap.ts files, use 'as const' type assertion for changeFrequency values to match the expected literal types in MetadataRoute.Sitemap
- In Next.js projects with aliased imports (@/hooks, @/components), make sure to maintain proper directory structures and use re-export files to maintain backward compatibility when refactoring.

## Message Box UI Pattern
- Container: White background, black border (2px), rounded corners (16px)
- Heading: "Black Han Sans" font, ~32px, black, center-aligned
- Form Layout: Vertical stack with ~16-20px spacing
- Input Fields: Black border (2px), white background, rounded corners (8px), padding (12px)
- Submit Button: Black background, yellow text (#FFDE00), purple heart emoji, full width, rounded (8px)
- Labels: Bold, black text, slightly larger than input text
- Textarea: Taller than regular inputs, same styling pattern

# Scratchpad

## Current Task: Create BTS Member Whack-a-Mole Mini-Game ✅ COMPLETED
[X] Explored existing games structure and patterns
[X] Created BTSWhackAMole component with engaging gameplay
[X] Added BTS member rarity system (Common, Rare, Legendary)
[X] Implemented combo system and streak bonuses
[X] Added mobile-friendly touch controls and animations
[X] Updated games index to export new component
[X] Added new game to games page listing
[X] Created dedicated game page with tips and member guide
[X] Added SEO metadata for the new game page
[X] Used BTS-themed colors and official emojis for each member

## Game Features Implemented:
- **3x3 Grid Layout**: Classic whack-a-mole hole arrangement
- **BTS Member System**: All 7 members with unique emojis and point values
- **Rarity System**: Common (RM, Jin), Rare (Suga, J-Hope, Jimin, V), Legendary (Jungkook)
- **Dynamic Scoring**: Base points + level bonuses + combo multipliers
- **Visual Timer**: Red ring showing time left for each member
- **Animations**: Smooth pop-up/down animations with Framer Motion
- **Confetti Effects**: Canvas confetti for hits, combos, and level ups
- **Game Statistics**: Score, accuracy, streaks, level progression
- **Pause/Resume**: Full game state management
- **Mobile Optimized**: Touch controls and responsive design

## Previous Task: Purple Hearts Collector Game - Speed Balancing ✅ COMPLETED
[X] Fixed heart spawning and animation loop issues
[X] Fixed game timer dependency problems  
[X] Fixed heart positioning and collision detection
[X] Balanced game difficulty for better user experience
[X] Removed debug console logs

## Issues Fixed:
- **Heart Spawning**: Fixed infinite recursion in spawnHeart setTimeout
- **Animation Loop**: Removed updateHearts callback causing dependency issues
- **Game Timer**: Fixed circular dependency by separating timer logic
- **Collision Detection**: Changed from window.innerHeight to game area height (550px)
- **Cleanup**: Added proper timer cleanup in startGame function
- **Game Balance**: Adjusted speeds and spawn rates for better progression

## Speed & Difficulty Adjustments:
- **Level 1 Speed**: Reduced from 2.5-4.5 to 1.1-1.6 pixels per frame (much easier!)
- **Level Progression**: More gradual speed increase (+0.3 per level instead of +0.5)
- **Spawn Rate**: Slower initial spawn (1.5s instead of 1s) with better progression
- **Minimum Spawn Delay**: Increased from 300ms to 500ms for better gameplay

## Previous Task: Build Purple Hearts Collector Mini-Game ✅ COMPLETED
[X] Explore current navigation structure
[X] Create Purple Hearts Collector game component  
[X] Add Games dropdown menu to navigation
[X] Add Purple Hearts Collector to Games menu
[X] Make it mobile-friendly and BTS-themed
[X] Test the complete implementation

## Summary:
✅ Built engaging Purple Hearts Collector mini-game with:
   - Falling hearts with different point values (Purple: 10, Gold: 25, Silver: 15)
   - Streak system with multiplier bonuses
   - Level progression and increasing difficulty
   - Mobile-friendly touch controls
   - BTS-themed colors and styling
   - Pause/resume functionality
   - Confetti effects and animations
   - Game statistics tracking

✅ Added complete navigation structure:
   - Games added to ARMY dropdown menu (both desktop and mobile)
   - Created /games main page showcasing all mini-games
   - Created /games/purple-hearts-collector dedicated game page
   - Added proper metadata for SEO

✅ Features implemented:
   - Responsive design works perfectly on mobile devices
   - Framer Motion animations for smooth gameplay
   - Canvas confetti effects for celebrations
   - Official BTS colors used throughout (#FFDE00 yellow, purple hearts)
   - Game statistics and score tracking
   - Professional game UI with pause/resume
   - Tips and instructions for players

## Previous Tasks Completed:
[X] Codebase Cleanup - Remove unused files and organize SQL files
  - [X] Identified redundant SQL files:
    - fix-message-likes-table.sql (redundant with love-button-schema.sql)
    - recreate-likes-tables.sql (redundant with love-button-schema.sql)  
    - sql-to-run.sql (redundant with story-comments.sql and supabase-setup.sql)
  - [X] Identified duplicate documentation:
    - docs/supabase-setup.md vs SUPABASE_SETUP.md (different content, both needed)
    - app/.cursorrules vs .cursorrules (app version is outdated)
  - [X] Move SQL files to organized structure in sql/ directory
  - [X] Remove redundant SQL files from root
  - [X] Remove outdated app/.cursorrules file
  - [X] Verify no breaking changes to existing functionality

## Files Successfully Removed:
1. ✅ fix-message-likes-table.sql - Redundant with love-button-schema.sql
2. ✅ recreate-likes-tables.sql - Redundant with love-button-schema.sql  
3. ✅ app/.cursorrules - Outdated version of root .cursorrules

## Files Successfully Organized:
- ✅ Moved love-button-schema.sql to sql/
- ✅ Moved supabase-setup.sql to sql/ (updated SUPABASE_SETUP.md reference)
- ✅ Moved message-comments.sql to sql/
- ✅ Moved story-comments.sql to sql/

## Files Kept (All Active):
- ✅ compatibility/ directory - ACTIVELY USED by next.config.mjs for React 19 compatibility
- ✅ docs/supabase-setup.md - Different from root SUPABASE_SETUP.md (playlists vs messages)
- ✅ All component files - All imports verified and working
- ✅ All library files - All being used by components

## Unused Dependencies Found:
- ⚠️ react-quill (2.0.0) - Not used anywhere in codebase
- ⚠️ chart.js (4.4.9) - Not used anywhere in codebase  
- ⚠️ react-chartjs-2 (5.3.0) - Not used anywhere in codebase

## Dependencies Verified as Used:
- ✅ recharts - Used in chart.tsx component
- ✅ framer-motion - Used in quiz pages and components
- ✅ All other dependencies verified as actively used

## Next Steps:
1. [⚠️ URGENT] Run the SQL schema in Supabase dashboard (sql/love-button-schema.sql)
   - Error: Database tables don't exist yet, causing empty error objects `{}`
   - Fixed: Improved error handling to show helpful messages
   - Created: SUPABASE_LOVE_BUTTON_SETUP.md with step-by-step instructions
2. [✅] Fixed love button counter synchronization issue
   - Issue: Counter wasn't updating when users clicked the love button
   - Fix: Updated state management to properly sync between LoveButton and parent components
   - Solution: Parent components now update their local state and pass correct props to LoveButton
3. Update homepage to show featured messages and stories
4. Update message and story front pages to highlight featured content
5. Test the complete love button functionality
6. Consider removing unused dependencies: react-quill, chart.js, react-chartjs-2

## Implementation Summary:
- **Listing Pages**: Show read-only like count with purple heart icon (only if > 0 likes)
- **Detail Pages**: Show interactive love button with full functionality
- **Database**: Complete schema with triggers for auto-featured content (10+ likes)
- **Error Fixed**: Server-side rendering issue resolved with browser environment check
- **Codebase**: Clean and well-organized with no unused files or broken imports