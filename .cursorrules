# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section so you will not make the same mistake again.

Use the `.cursorrules` file as a Scratchpad to organize your thoughts. When receiving a new task, review the content, clear old tasks if necessary, explain the current task, and plan steps to complete it. Use todo markers to indicate progress:
[X] Task 1
[ ] Task 2

Update progress in the Scratchpad when finishing subtasks or milestones to maintain a big picture of the task.

# Tools

All tools are in python3. For batch processing, consult the python files and write your own script if needed.

## Screenshot Verification
```bash
venv/bin/python3 tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
venv/bin/python3 tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

## LLM
```bash
venv/bin/python3 ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

Supported providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

## Web browser
```bash
venv/bin/python3 ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```

## Search engine
```bash
venv/bin/python3 ./tools/search_engine.py "your search keywords"
```

# Lessons

## User Specified Lessons
- Use python venv in ./venv for development. Check for 'uv' with `which uv`. If available, use `uv pip install`; otherwise, use `pip`.
- For git multiline commit messages, write to a file and use `git commit -F <filename>`. Include "[Cursor] " in commit messages and PR titles.
- The official BTS brand color is #FFDE00 (yellow) and should be used for branded elements instead of purple.
- When customizing Sonner library toast notifications, use standard properties in ExternalToast type and avoid non-standard properties like 'descriptionStyle'.
- For Next.js page layouts, set specific max-width constraints instead of relying on container classes to maintain consistent widths across different screen sizes.
- For image creation in canvas contexts, use `document.createElement('img')` instead of `new Image()` to avoid TypeScript errors.
- Use Unicode escape sequences like `\u201C` (left double quote) and `\u201D` (right double quote) for special characters in TypeScript/JavaScript to avoid syntax and linter errors.
- When deploying to hosting platforms like Netlify or Vercel, ensure that all necessary environment variables (such as Supabase credentials) are configured in the platform's environment settings.
- For mobile-friendly spacing in Next.js layouts, use responsive padding classes (e.g., pt-0 md:pt-8) to reduce space between navbar and content on small screens while maintaining appropriate spacing on larger displays.
- Avoid using console.error in production code; instead, use conditional logging based on NODE_ENV to show detailed errors only in development.
- When implementing SEO in Next.js, metadata cannot be exported from client components (with "use client" directive). For client pages, create a separate metadata.ts file in the same directory.
- For date and time displays that need to work across different user timezones, implement client-side timezone handling using the browser's Date API instead of server-side fixed timezones.
- When working with third-party APIs like Spotify that have rate limits, implement these strategies to prevent 429 errors: 1) Add local caching, 2) Use exponential backoff for retries, 3) Process batch requests sequentially with delays, 4) Add client-side throttling, and 5) Provide clear user feedback during retries.
- When Supabase operations fail with empty error objects `{}`, it usually means the database tables don't exist yet. Always provide helpful error messages that mention "Database tables may not exist. Please run the SQL schema first." instead of just logging the empty error object.

## Cursor learned
- Handle UTF-8 encoding properly for international search queries
- Use 'seaborn-v0_8' instead of 'seaborn' due to recent version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- In Next.js, `dynamic` imports with `{ ssr: false }` cannot be used directly in Server Components. Create a client component wrapper with "use client" that handles the dynamic import.
- For React 19 compatibility issues with packages like react-day-picker, use --legacy-peer-deps or downgrade to React 18.2.0
- When renaming React component functions, maintain backward compatibility with additional named exports
- In Next.js sitemap.ts files, use 'as const' type assertion for changeFrequency values to match the expected literal types in MetadataRoute.Sitemap
- In Next.js projects with aliased imports (@/hooks, @/components), make sure to maintain proper directory structures and use re-export files to maintain backward compatibility when refactoring.

## Message Box UI Pattern
- Container: White background, black border (2px), rounded corners (16px)
- Heading: "Black Han Sans" font, ~32px, black, center-aligned
- Form Layout: Vertical stack with ~16-20px spacing
- Input Fields: Black border (2px), white background, rounded corners (8px), padding (12px)
- Submit Button: Black background, yellow text (#FFDE00), purple heart emoji, full width, rounded (8px)
- Labels: Bold, black text, slightly larger than input text
- Textarea: Taller than regular inputs, same styling pattern

# Scratchpad

## Current Task: Bug Fixes & Style Consistency

### Task Description
Fixed critical bugs and improved style consistency across the application:
1. ✅ Fixed ARMY Card Generator song search field - selected songs now properly appear in input
2. ✅ Fixed song selection behavior and input initialization 
3. ✅ Updated discharge celebration styling on messages page to match homepage CTA
4. ✅ Removed emojis from messages page discharge banner
5. ✅ Replaced bouncing objects with BTS purple logo for consistency
6. ✅ Fixed song suggestion selection issue - songs now properly appear in field when clicked

### Previous Completed: Footer Floating Design & Mobile Auto-Scroll Enhancement
1. ✅ Converted footer from full-width to floating design matching navbar
2. ✅ Added centered container with max-width, rounded corners, backdrop blur
3. ✅ Implemented 80% opacity with theme color preservation
4. ✅ Enhanced responsive layout (1 col mobile, 2 col small, 3 col large screens)
5. ✅ Added auto-scroll to card preview on mobile when Generate button is clicked
6. ✅ Maintained all footer elements visibility and proper spacing

### Technical Implementation Details
- **Footer Hover Effects**: 
  - Added smooth color transitions with theme-aware accent colors
  - Implemented translateX(4px) animation on hover for visual feedback
  - Added icon scaling effect (scale-110) with group hover classes
  - Used onMouseEnter/onMouseLeave for precise color control
- **Photo Change Auto-Scroll**: 
  - Extended auto-scroll functionality to handleRefreshPhoto function
  - Added 300ms delay for better user experience timing
  - Maintains consistent mobile detection (window.innerWidth < 768)
- **BTS Song Input Restriction**: 
  - Created handleSongInputChange to validate against real BTS songs
  - Added onBlur validation to clear invalid inputs automatically
  - Implemented visual feedback with red border for invalid entries
  - Added confirmation text for valid song selection
  - Restricted input to only exact matches from BTS song database

### Previous Completed: Gradient Line Removal & Multi-Tweet Enhancement
1. ✅ Removed gradient line animations below navbar for all themes
2. ✅ Created MultipleTwitterEmbed component for compact display
3. ✅ Added new X post (ID: 1932232770454990855) to homepage
4. ✅ Combined both tweets in same "Latest from BTS" container
5. ✅ Implemented responsive grid layout (1 column on mobile, 2 on desktop)

### Previous Completed: Floating Glass Navbar Enhancement
1. ✅ Converted navbar from full-width to centered floating design
2. ✅ Added glass transparency effect with backdrop blur
3. ✅ Implemented 80% opacity with theme color preservation
4. ✅ Added rounded corners and shadow for floating effect
5. ✅ Enhanced mobile menu with consistent glass styling
6. ✅ Improved mobile menu button with subtle glass borders
7. ✅ Maintained responsive design across all devices

### Previous Completed: Theme Modal Fix & X Post Embed
1. ✅ Fixed theme modal positioning issue for Black Swan theme on mobile
2. ✅ Improved modal viewport handling with dvh units for better mobile support
3. ✅ Increased z-index to prevent overlay conflicts
4. ✅ Created TwitterEmbed component for BTS official posts
5. ✅ Added BTS military service completion tweet to homepage
6. ✅ Positioned X post embed between BTS Calendar and Discharge Dates sections

### Technical Implementation Details
- **Modal Positioning Fix**: 
  - Changed z-index from z-[100] to z-[200] to prevent conflicts
  - Used dvh (dynamic viewport height) units for better mobile support
  - Improved overflow handling with proper viewport calculations
  - Added proper centering with margin auto and relative positioning
- **Twitter Embed**: 
  - Created reusable TwitterEmbed component with TypeScript support
  - Dynamically loads Twitter widgets script only when needed
  - Embedded BTS official tweet about military service completion
  - Positioned strategically between Calendar and Discharge tracking sections

### Previous Completed: Beautiful Theme Modal Enhancement
1. ✅ Built ThemeModal component with elegant centered popup design
2. ✅ Enhanced mobile theme toggle with BTS logo icon instead of palette
3. ✅ Updated desktop theme selector to use modal instead of dropdown
4. ✅ Added beautiful BTS-themed design with logo, gradients, and animations
5. ✅ Implemented backdrop blur, animations, and smooth interactions
6. ✅ Added theme preview bars showing gradient colors for each theme
7. ✅ Enhanced visual feedback with current theme indicators and selection states

### Previous Completed: Mobile Theme Toggle Enhancement
1. ✅ Created dedicated MobileThemeToggle component
2. ✅ Moved theme selector from mobile menu to main navbar header
3. ✅ Positioned theme toggle on left side of hamburger menu
4. ✅ Created proper icon-based button with theme color indicator
5. ✅ Maintained theme selector functionality on mobile with better accessibility

### Previous Completed: Theme Enhancements & Love Yourself Answer Addition
1. ✅ Modified navbar to use white logo for dark themes (like Black Swan)
2. ✅ Added dynamic logo switching based on navbar background brightness
3. ✅ Created Love Yourself Answer theme inspired by the gradient artwork
4. ✅ Implemented comprehensive styling with flowing animations
5. ✅ Enhanced theme system with smart logo detection

### Completed Features

#### Smart Logo System
- ✅ Added theme context to navbar component
- ✅ Implemented brightness detection for navbar backgrounds
- ✅ Dynamic switching between regular and white BTS logos
- ✅ Applied to both main logo and BTS dropdown icons
- ✅ Works for both desktop and mobile menu interfaces

#### Love Yourself Answer Theme (New)
- ✅ Created vibrant gradient theme inspired by LY Answer artwork:
  - Primary: Vibrant Pink (#E91E63) - left side of gradient
  - Secondary: Deep Purple (#9C27B0) - center gradient
  - Accent: Bright Blue (#2196F3) - right side gradient
  - Background: Pure white to make colors pop
- ✅ Added flowing animations: gradient-flow, love-pulse, rainbow-wave
- ✅ Implemented colorful effects and gradient backgrounds
- ✅ Created dynamic color-shifting animations

#### CSS Animations & Effects
- ✅ Gradient flow animations with 200% background sizing
- ✅ Love pulse and color-shift effects for elements
- ✅ Rainbow wave animations cycling through theme colors
- ✅ Flowing motion effects for decorative elements
- ✅ Enhanced navbar with linear gradient background

#### Previous Themes Maintained
- ✅ Spring Day: Gentle pastel aesthetic for renewal and hope
- ✅ Black Swan: Elegant dark theme with artistic sophistication
- ✅ Permission to Dance: Festival celebration vibes
- ✅ Butter: Smooth summery golden aesthetics

#### Theme Integration
- ✅ Added Love Yourself Answer to availableThemes registry
- ✅ Comprehensive emoji and pattern elements for gradient theme
- ✅ Enhanced navbar effects with flowing gradient lines
- ✅ Sophisticated card styling with color-shifting hover effects

### Technical Implementation
- Smart logo detection using brightness calculation (luminance formula)
- Dynamic theme-aware component rendering
- Love Yourself Answer: Vibrant gradient aesthetic capturing self-love and acceptance
- Comprehensive CSS animations with optimized performance
- Cross-theme compatibility with consistent component behavior
- Enhanced visual effects while maintaining accessibility standards

### Technical Implementation Details
- **Mobile Menu Color Logic**: Uses existing `isDarkNavbar()` function to detect dark themes
- **Dynamic Text Classes**: `mobileMenuTextClass` switches between `text-white` and `text-black`
- **Smart Hover Effects**: Different hover colors for dark vs light themes
- **Emoji Cleanup**: Removed floating emoji animations and main headline emojis
- **Double Border Fix**: Removed inner border on mobile theme toggle image